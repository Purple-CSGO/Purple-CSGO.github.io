<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://eeudn8.coding-pages.com</id>
    <title>Purp1e</title>
    <updated>2020-02-09T10:17:46.738Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://eeudn8.coding-pages.com"/>
    <link rel="self" href="https://eeudn8.coding-pages.com/atom.xml"/>
    <subtitle>cuz&apos; o&apos; love</subtitle>
    <logo>https://eeudn8.coding-pages.com/images/avatar.png</logo>
    <icon>https://eeudn8.coding-pages.com/favicon.ico</icon>
    <rights>All rights reserved 2020, Purp1e</rights>
    <entry>
        <title type="html"><![CDATA[HLAE搭配FFMPEG录制教程]]></title>
        <id>https://eeudn8.coding-pages.com/hlae-ffmpeg/</id>
        <link href="https://eeudn8.coding-pages.com/hlae-ffmpeg/">
        </link>
        <updated>2019-06-11T06:34:24.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>2019/5/23 HLAE更新支持了FFMPEG，官方给出的说明并不是很详细，这里会详细地介绍如何为HLAE安装FFMPEG和录制视频，尤其在录制高帧素材时可以省去很多空间。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>2019/5/23 HLAE更新支持了FFMPEG，官方给出的说明并不是很详细，这里会详细地介绍如何为HLAE安装FFMPEG和录制视频，尤其在录制高帧素材时可以省去很多空间。</p>
</blockquote>
<!--more-->
<h1 id="为hlae安装ffmpeg">为HLAE安装FFMPEG</h1>
<p>第一步，更新HLAE至最新版本，这样，hlae根目录下会多出一个ffmpeg文件夹。对于使用CSGO Demoes Manager下载的hlae，其位置如下（Purp1e是我的用户名）</p>
<pre><code>C:\Users\Purp1e\AppData\Local\AkiVer\hlae\ffmpeg
</code></pre>
<p>第二步，下载<a href="https://ffmpeg.zeranoe.com/builds/">FFMPEG</a>，进入网站直接点击<code>Download Build</code>下载即可。下载之后打开压缩包，进入下一级，可以看到bin/doc/presets等文件，把这些文件全部解压到刚才的ffmpeg文件夹中，这样FFMPEG就安装完成了。</p>
<figure data-type="image" tabindex="1"><img src="https://eeudn8.coding-pages.com/post-images/1581236382535.png" alt="安装ffmpeg" loading="lazy"></figure>
<h1 id="录制方法">录制方法</h1>
<h2 id="基础指令说明">基础指令说明</h2>
<p>分层录制的方法、指令请参考其它教程，这里只用我经常使用的raw层举例：</p>
<pre><code>mirv_streams add baseFx raw;
mirv_streams edit raw record 1;	//开启raw通道的录制
host_framerate 300;	//录制帧率300fps
mirv_streams record start;
//...录制结束
mirv_streams record end;
</code></pre>
<p>当然我肯定不是每次都输入一遍指令，这些指令我都绑定了按键，详情见我的<a href="https://github.com/Purple-CSGO/Cfg-Preset-By-Purp1e/blob/v1.1/hlae.cfg">CFG预设</a>。</p>
<p>这样直接录制得到的是无损的tga图片序列，大概一分钟104GB，如果录制多个层还要翻倍。在安装了FFMPEG之后应该这样录制：</p>
<pre><code>mirv_streams add baseFx raw;
mirv_streams edit raw record 1;
mirv_streams edit raw settings afxFfmpegYuv420p;
host_framerate 300;
mirv_streams record start;
//录制结束
mirv_streams record end;
</code></pre>
<p>这样录制会得到一个比较小的视频，经过测试，一个<code>30s 300fps 1080p</code>的视频大约130MB。注意这个指令，使用它时录制得到的是 YUV 4:2:0 色彩空间的视频：</p>
<pre><code>mirv_streams edit raw settings afxFfmpegYuv420p;
</code></pre>
<hr>
<p>如果把<code>afxFfmpegYuv420p</code>替换成<code>afxFfmpeg</code>，则得到的是 YUV 4:4:4 色彩空间的视频，质量更高，但是一般的播放器播放时异常，VLC等播放器不会出现异常，剪辑时正常：</p>
<pre><code>mirv_streams edit raw settings afxFfmpeg;
</code></pre>
<p>使用哪一种取决于你个人的喜好，如果同时录制多层，每个层(stream)都要使用这样一条指令调整录制设置。对我来说，我更希望牺牲一定的空间换取更好的视频画质，想要这样做就得调整FFMPEG压制参数。</p>
<h2 id="自定义ffmpeg录制预设">自定义FFMPEG录制预设</h2>
<p>如果上面给出的预设<code>afxFfmpeg</code>的效果不能让你满意，请参照下面演示自定义CRF=20的预设和使用的过程：</p>
<pre><code>//定义预设
mirv_streams settings add ffmpeg myFfmpegCrf &quot;-c:v libx264 -preset slow -crf 20 {QUOTE}{AFX_STREAM_PATH}\video.mp4{QUOTE}&quot;
//修改raw层的设置
mirv_streams edit raw settings myFfmpegCrf;
</code></pre>
<p>引号<code>&quot;&quot;</code>里的参数就是x264的录制参数了，懂得x264的大佬可以提供更好的压制参数，一般为了调整画质和码率，只用修改<a href="https://zhidao.baidu.com/question/984758498910362019.html">CRF</a>的值，即修改<code>-crf 20</code>这里的数字，数字越小质量越高，文件体积越大，录制速度越慢。</p>
<h2 id="更换录制设置">更换录制设置</h2>
<p>同时使用多个通道时修改录制设置比较麻烦，最新版本的HLAE支持如下指令，更改所有通道的录制设置。</p>
<pre><code>mirv_streams settings edit afxDefault settings afxFfmpeg;	//录制设置改为afxFfmpeg
</code></pre>
<h1 id="ffmpeg录制cfg及使用方法分享">FFMPEG录制CFG及使用方法分享</h1>
<h2 id="主要说明">主要说明</h2>
<p>在此基础之上我测试了不同的preset和crf/qp的值，得到了几档合适的预设并做成了<a href="https://github.com/Purple-CSGO/Cfg-Preset-By-Purp1e/blob/v1.1/ffmpeg.cfg"><code>ffmpeg.cfg</code></a>方便大家使用。</p>
<p><code>mirv_streams settings...</code>自定义FFMPEG录制预设，<strong>不用修改</strong>，除非你特别了解x264的参数。</p>
<p><a href="https://purp1e.site/csgo/advancedcommand.html#alias%E6%8C%87%E4%BB%A4"><code>alias...</code></a>自定义快捷指令，<strong>不用修改</strong>，使用指令（如qp12）可以为所有的通道更换录制设置。</p>
<p><code>qp12;</code>（28行）设定默认录制设置，在加载ffmpeg.cfg之后<strong>自动使用</strong>qp12预设，<strong>根据需要修改</strong>。</p>
<p><code>echo...</code>（30行之后）在控制台中输出提示，<strong>根据需要修改</strong>。</p>
<figure data-type="image" tabindex="2"><img src="https://eeudn8.coding-pages.com/post-images/1581236399130.png" alt="CFG" loading="lazy"></figure>
<hr>
<p>把<code>ffmpeg.cfg</code>置于cfg文件夹中，游戏中加载自己的cfg之后：</p>
<pre><code>exec ffmpeg
</code></pre>
<hr>
<figure data-type="image" tabindex="3"><img src="https://eeudn8.coding-pages.com/post-images/1581236414257.png" alt="控制台提示" loading="lazy"></figure>
<hr>
<p>再根据提示，输入预设指令，可以直接从控制台复制，如果要使用<strong>qp0</strong>，控制台中输入：</p>
<pre><code>qp0
</code></pre>
<p>控制台显示：</p>
<pre><code>Record Setting: qp0
</code></pre>
<p>其它录制相关的操作（包括通道，录制帧率的设置）不变。</p>
<h2 id="补充说明">补充说明</h2>
<p>一般整个cfg文件只有第28行的 <code>qp12;</code> 需要修改，比如你想要默认的设置是<code>crf18</code>，直接修改成<code>crf18</code>即可。</p>
<p>可以在你正录制使用的cfg（如hlae.cfg）中添加：</p>
<pre><code>exec ffmpeg
</code></pre>
<p>这样每次使用hlae.cfg时也会加载这里的设置。当然也可以直接把相关指令整合到你的录制cfg中。</p>
<hr>
<p>加载你的CFG -&gt; 加载ffmpeg.cfg -&gt; (使用预设指令) -&gt; 录制方式修改完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Config|CFG设置详细解读和启动项推荐]]></title>
        <id>https://eeudn8.coding-pages.com/csgo-config/</id>
        <link href="https://eeudn8.coding-pages.com/csgo-config/">
        </link>
        <updated>2019-05-23T12:28:56.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>这篇文章会详细的介绍所有与CFG和启动项相关的知识，希望可以加深各位对CSGO设置的理解。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>这篇文章会详细的介绍所有与CFG和启动项相关的知识，希望可以加深各位对CSGO设置的理解。</p>
</blockquote>
<!--more-->
<h1 id="什么是cfg为什么要用cfg">什么是CFG|为什么要用CFG？</h1>
<p>CFG是Config【设置】的简写，把各种指令写入<code>.cfg</code>文件中可以快速加载、备份游戏设置。此外，了解<a href="https://purple-csgo.github.io/csgo/advancedcommand.html">控制台进阶指令</a>的alias指令关闭游戏之后失效的特点之后，使用CFG可以避免繁琐的输入指令的过程。当然我也提供了一整套<a href="https://github.com/Purple-CSGO/Cfg-Preset-By-Purp1e">CFG预设</a>可供参考，适用于各种使用场景。</p>
<h1 id="cfg文件放在哪">CFG文件放在哪？</h1>
<p>总共有2种位置可以存放<code>.cfg</code>文件，一是CSGO游戏目录下的cfg文件夹，路径：</p>
<pre><code>...\Steam\steamapps\common\Counter-Strike Global Offensive\csgo\cfg
</code></pre>
<p>如果CSGO和Steam不在一个分区，安装在了其它位置，可能路径：</p>
<pre><code>...\SteamLibrary\steamapps\commonCounter-Strike Global Offensive\csgo\cfg
</code></pre>
<p>第二种位置在Steam的安装目录下：</p>
<pre><code>...\Steam\userdata\123456789\730\local\cfg
</code></pre>
<p>这里的<code>123456789</code>代表SteamID3，一般是9位数字，复制Steam个人资料的链接到<a href="https://steamid.io/">这个网站</a>中可以查到9位数字ID。如果这台只登录过一个账号，userdata下只会有一个文件夹，但如果有多个账号登录过，就得查找一下ID。</p>
<figure data-type="image" tabindex="1"><img src="https://eeudn8.coding-pages.com/post-images/1581235364767.png" alt="查找steamid" loading="lazy"></figure>
<p>CSGO游戏目录的cfg文件夹中<code>.cfg</code>文件，所有账号共享使用。</p>
<p>userdata目录下的cfg文件夹中<code>.cfg</code>文件，仅供该账号使用。</p>
<p>值得注意的是，个人cfg文件夹中存在这两个文件：</p>
<ul>
<li><strong>config.cfg</strong></li>
</ul>
<ul>
<li><strong>video.txt</strong></li>
</ul>
<p>config.cfg中存放了这个账号几乎所有的参数设置，而video.txt存放的是账号的视频设置。其实对于跑图(<a href="https://github.com/Purple-CSGO/Cfg-Preset-By-Purp1e/blob/master/practice.cfg">practice</a>)这样的cfg，如果可以，放在游戏的cfg文件夹当然更好。放在CSGO目录下使用起来比较方便，但是考虑到要打包个人设置，和不同账号之间可能存在的设置冲突，更倾向于放在个人cfg文件夹中。</p>
<h1 id="如何创建一个cfg文件">如何创建一个.CFG文件?</h1>
<p>关键在于显示文件的后缀名，Win10系统按照下图操作：<br>
<img src="https://eeudn8.coding-pages.com/post-images/1581235374512.png" alt="显示扩展名" loading="lazy"></p>
<p>Win7系统如下：<br>
<img src="https://eeudn8.coding-pages.com/post-images/1581235379804.png" alt="文件夹选项" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://eeudn8.coding-pages.com/post-images/1581235383882.png" alt="Win7显示扩展名" loading="lazy"></figure>
<p>显示隐藏的扩展名之后，右键新建一个文本文档，把后缀名txt改成cfg即可。同时可以选择<code>.cfg</code>文件右键，打开方式，设置默认为记事本打开。</p>
<p>这里更推荐使用<a href="https://notepad-plus-plus.org/download">Notepad++</a>、<a href="https://atom.io/">Atom</a>或<a href="https://code.visualstudio.com/">Vscode</a>等编辑CFG，其中Notepad++安装包最小，约4MB。</p>
<h1 id="如何加载cfg中的设置">如何加载CFG中的设置?</h1>
<p>加载/执行的英文是【execute】，简写：<strong>exec</strong>，打开游戏，控制台中输入：</p>
<pre><code>exec xxx.cfg	//xxx是cfg的名称
</code></pre>
<p>或者：</p>
<pre><code>exec xxx	//省略后缀名
</code></pre>
<p>输入过程中会有提示，如果没有提示并且控制台显示：</p>
<pre><code>exec: couldn't exec xxx
</code></pre>
<p>说明没有把<code>.cfg</code>文件放在正确的位置，或者</p>
<h1 id="为什么要写autoexeccfg">为什么要写autoexec.cfg?</h1>
<p>在很多设置有关的教程中都会提到这样autoexec.cfg，即<code>auto-execute-config</code>，自动执行的设置文件。为什么要把一些指令放在xxx.cfg中而不是config.cfg里面呢？</p>
<p>首先，每次改变设置游戏都会对config.cfg规格化，即使把指令放在里面，也只能生效一次，这些指令也会被抛弃，包括alias。游戏的设置在不断的变动，同时config.cfg也被修改，就没有办法回到之前的设置（准星、持枪等），除了用5e、b5等config云或者手动备份，不如把常用设置专门放在一个cfg里，方便修改。</p>
<p><img src="https://eeudn8.coding-pages.com/post-images/1581235389843.png" alt="规格化CFG" loading="lazy"><br>
其次，alias指令（实现一键跳投等功能）在关闭游戏后失效，通过其他的cfg，比如auto.cfg，<strong>每次启动游戏自动加载</strong>，保证每次启动游戏设置一致，避免了每次启动游戏手动输入exec指令的麻烦。</p>
<h1 id="自动加载cfg方法">自动加载CFG方法</h1>
<figure data-type="image" tabindex="3"><img src="https://eeudn8.coding-pages.com/post-images/1581235394917.png" alt="自动加载CFG" loading="lazy"></figure>
<p>启动项参考：</p>
<pre><code>-worldwide -novid -nojoy -d3d9ex +exec auto.cfg
</code></pre>
<p>CFG结尾添加：</p>
<pre><code>host_writeconfig;
//end
</code></pre>
<h1 id="cfg常用指令和语法">CFG常用指令和语法</h1>
<p>echo指令：在控制台显示文字。</p>
<pre><code>//&quot;&quot;可省，;可省
echo Hello World
echo Hello World;
echo &quot;Hello Wolrd&quot;;
//输出空行
echo;
//输出中文&quot;&quot;不可省，必须是英文引号
//CFG使用UTF-8/GB2312编码，否则乱码
echo &quot;你好！&quot;
echo &quot;你好！&quot;;
</code></pre>
<p>注释</p>
<pre><code>echo Hail Jo~//这是注释
&quot;&quot;&quot;这也是注释，不常用
</code></pre>
<p>加载/执行CFG</p>
<pre><code>exec auto.cfg
//.cfg可省略
exec auto
</code></pre>
<p>分号可省略</p>
<pre><code>//分号省略不影响，
sensitivity 1
bind mouse1 +attack;
//单行多指令/输入控制台务必用分号分隔
sensitivity 1;bind mouse1 +attack
</code></pre>
<p>控制台显示中文提示的方法</p>
<pre><code>//输出中文&quot;&quot;不可省，必须是英文引号
//CFG使用UTF-8/GB2312编码，否则乱码
echo &quot;你好！&quot;
echo &quot;你好！&quot;;
</code></pre>
<hr>
<h1 id="设置启动项">设置启动项</h1>
<p>打开steam的库：<code>库→ConterStrike:Global Offensive→右键→属性→设置启动选项...</code></p>
<h2 id="启动项之间用空格分隔">启动项之间用空格分隔</h2>
<pre><code>-worldwide -novid -nojoy -d3d9ex +exec auto.cfg
//错误写法
-worldwide-novid-nojoy
</code></pre>
<h2 id="启动项指令和参数之间用空格分隔">启动项指令和参数之间用空格分隔</h2>
<pre><code>-tickrate 128
//错误写法
-tickrate128
</code></pre>
<h2 id="启动项指令由-开头游戏控制台指令由-开头">启动项指令由 - 开头，游戏控制台指令由+ 开头</h2>
<pre><code>-w 1920 -h 1080
+fps_max 300
+exec auto.cfg
//无效写法
-exec auto.cfg
</code></pre>
<h2 id="常见启动项">常见启动项</h2>
<pre><code>-novid  关闭过场动画
-high  提高CSGO程序优先级，有可能负优化
-nojoy 关闭手柄相关，降低内存占用
-d3d9ex  提高帧数和切换桌面速度
-tickrate 128  本地房间128Tick
-perfectworld  直接进入国服
-worldwide  直接进入国际服
-w 1920 -h 1080  设置分辨率1920x1080
+exec auto.cfg  自动加载auto.cfg
+fps_max 300  限制fps最大300
</code></pre>
<h2 id="推荐启动项">推荐启动项</h2>
<pre><code>-novid -nojoy -high -d3d9ex -tickrate 128 +exec auto.cfg
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSGO控制台进阶指令]]></title>
        <id>https://eeudn8.coding-pages.com/csgo-console2/</id>
        <link href="https://eeudn8.coding-pages.com/csgo-console2/">
        </link>
        <updated>2019-05-23T11:37:28.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>上次的文章讲解了控制台的用法和基础的常用指令，这次介绍几个进阶的指令及用法，希望能够有效提升诸位的睡眠质量( ͡° ͜ʖ ͡°)。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>上次的文章讲解了控制台的用法和基础的常用指令，这次介绍几个进阶的指令及用法，希望能够有效提升诸位的睡眠质量( ͡° ͜ʖ ͡°)。</p>
</blockquote>
<!--more-->
<h2 id="bind指令">bind指令</h2>
<pre><code>bind x &quot;...&quot;;
</code></pre>
<p>该指令的格式如上，x为绑定的按键名，<code>...</code>是绑定的指令，可以是一条也可以是多条指令用分号<code>;</code>分开，填入引号<code>&quot; &quot;</code>，当指令是没有间隔的单独指令时引号<code>;可以省略，其他情况不可省，如</code>+speed<code>可省略，</code>sensitivity 1`和多个指令不省略。多个指令例子如下：</p>
<pre><code>bind shift &quot;+speed;r_cleardecals&quot;;
</code></pre>
<p><code>+speed</code>是静步的指令，<code>r_cleardecals</code>是清楚血迹的指令，绑定了shift键。这条指令执行之后，在按下shift键静步的同时清除血迹。</p>
<p>bind指令还有一种用法，用来查看某个按键已经绑定的指令：</p>
<pre><code>bind x
</code></pre>
<p>输入之后控制台会显示已经绑定的指令，可以检查有没有正确的绑定按键。</p>
<h2 id="unbind指令">unbind指令</h2>
<p>清除已绑定的键位，比如已经绑定了x键，想要取消：</p>
<pre><code>unbind x
</code></pre>
<pre><code>unbindall	//取消所有按键绑定
</code></pre>
<pre><code>unbindallmousekeyboard//取消所有键鼠的绑定
</code></pre>
<p><a href="https://tools.dathost.net/csgo-commands">CSGO指令搜索</a></p>
<p><a href="https://developer.valvesoftware.com/wiki/Console_Command_List">V社官方指令清单</a></p>
<p><a href="https://github.com/Purple-CSGO/Cfg-Preset-By-Purp1e/blob/master/bind_default.cfg">默认键位的指令</a></p>
<h2 id="bindtoggle和toggle指令">bindtoggle和toggle指令</h2>
<p>有的指令比如<code>cl_drawhud 1</code>即打开HUD，修改数字得到<code>cl_drawhud 0</code>，即关闭HUD。实际这种指令往往在两个不同的值之间切换，那么使用bindtoggle和toggle就可以写出非常简单的一键切换的指令：</p>
<pre><code>bindtoggle x cl_drawhud;
</code></pre>
<pre><code>bind x &quot;toggle cl_drawhud&quot;;
</code></pre>
<p>这两种写法都可以实现x键切换HUD开关。</p>
<p>但是后者<code>toggle</code>的应用更广，可以触发切换更多的指令，比如：</p>
<pre><code>bind x &quot;toggle volume&quot;;
</code></pre>
<p>可以写成：</p>
<pre><code>bind x &quot;toggle volume 0 1&quot;;
</code></pre>
<p>但是实际上音量不仅有0、1两种情况，可以是0/1之间的小数，同样有的指令的值可以大于1，这时候用第二种写法就可以任意地切换。</p>
<pre><code>bind x &quot;toggle volume 1 0.5&quot;;	//一键切换音量100%/50%
</code></pre>
<h2 id="alias指令">alias指令</h2>
<p>bind指令可以给某个键绑定指令，而alias指令则可以自定义指令。有了alias之后，可以实现CSGO中很多特殊的功能，有兴趣可以了解一下<a href="https://purple-csgo.github.io/hlae/hlae-focus.html">一键高亮击杀</a>的指令解释。</p>
<pre><code>alias func &quot;...;...&quot;;
</code></pre>
<p>执行这条指令之后，在<strong>关闭CSGO游戏之前</strong>，使用<code>func</code>指令就相当于执行&quot;&quot;中所有的指令，可以直接在控制台中使用：</p>
<pre><code>func
</code></pre>
<p>也可以绑定到某个按键上，按键触发：</p>
<pre><code>bind x func;
</code></pre>
<p>一定注意alias指令是临时生效的，重启游戏就要重新输入，解决办法是写成CFG并启用自动加载。</p>
<hr>
<p>alias指令强大之处在于，它可以嵌套定义：</p>
<pre><code>alias f f_on;
alias f_on &quot;alias f f_off;...&quot;;
alias f_off &quot;alias f f_on;...&quot;;
bind x f;
</code></pre>
<p>这样就实现一个开关式的功能：</p>
<ul>
<li>一开始，按键<strong>x</strong>代表执行<code>f</code>，即<code>f_on</code>。</li>
<li>按下按键<strong>x</strong>，实际执行<code>f_on</code>，由于也执行了<code>alias f f_of;</code>，之后执行<code>f</code>相当于执行<code>f_off</code></li>
<li>再按下按键<strong>x</strong>，实际执行<code>f_off</code>，由于也执行了<code>alias f f_on;</code>，之后执行<code>f</code>相当于执行<code>f_on</code></li>
<li>往复在两个档位间切换</li>
</ul>
<p><code>...</code>处可以放入各种指令，已经可以实现很多的功能了，下面给出跳投的指令：</p>
<pre><code>bind Capslock +jumpthrow;	// &quot;Capslock&quot;键跳投 可修改
alias +jumpthrow &quot;+jump;-attack&quot;;
alias -jumpthrow -jump;
</code></pre>
<p>如果理解了刚才说的内容，这段指令应该可以理解，这里补充的是：<code>+指令</code>、<code>-指令</code>代表按下/松开按键时触发，按下Capslock键执行<code>+jump;-attack</code>，也就是跳投，松开Capslock键执行<code>-jump</code>，防止不停地跳。</p>
<hr>
<p>下一篇文章介绍Config和相关指令，敬请期待~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSGO控制台与常用指令]]></title>
        <id>https://eeudn8.coding-pages.com/csgo-console/</id>
        <link href="https://eeudn8.coding-pages.com/csgo-console/">
        </link>
        <updated>2019-05-22T12:48:38.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>这篇文章我会详细的介绍CSGO控制台、指令系统、设置方面的知识，有点晦涩，希望各位能在阅读的过程中时不时昏睡过去( ͡° ͜ʖ ͡°)。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>这篇文章我会详细的介绍CSGO控制台、指令系统、设置方面的知识，有点晦涩，希望各位能在阅读的过程中时不时昏睡过去( ͡° ͜ʖ ͡°)。</p>
</blockquote>
<!--more-->
<h3 id="控制台">控制台</h3>
<p>V社(Valve)的Source起源引擎制作的游戏都可以开发者控制台，简称控制台<code>console</code>，使用控制台可以实现很多游戏的设置面板无法提供的功能，比如跳投、切换准星参数、颜色等等特殊功能都是利用了控制台的指令实现的，这也是CS游戏的一大特色了。</p>
<h3 id="开启控制台">开启控制台</h3>
<p>在游戏的设置菜单里，<code>游戏设置-游戏-启用开发者控制台</code>选<strong>是</strong>即可启用控制台，之后按下<code>~</code>即可开关控制台并使用各种指令。开启控制台的指令是<code>con_enable 1</code>，看起来是个悖论，等到说CFG时就知道它的用处了。</p>
<figure data-type="image" tabindex="1"><img src="https://eeudn8.coding-pages.com/post-images/1581234291585.png" alt="开启控制台" loading="lazy"></figure>
<h3 id="多个控制台指令">多个控制台指令</h3>
<p>当同时需要在控制台使用多个指令时，务必使用分号<code>;</code>分隔各个指令。</p>
<h3 id="控制台提示">控制台提示</h3>
<p>指令输入的过程中控制台会给出提示，大多数情况都会有下拉菜单提示各种指令，可以使用↑↓在下拉菜单中切换，使用Tab键也可以自动填入下拉菜单的第一个指令，比如：</p>
<ul>
<li>显示各种网络参数的指令<code>net_graph 1</code>，输入至<code>net_</code>时下方第一条指令就是<code>net_graph</code>，直接按下<code>Tab</code>和<code>1</code>即可快速输入这条完整的指令。</li>
<li>退出游戏的指令<code>quit</code>，原理同上，输入<code>q</code>→<code>Tab</code>→<code>回车</code>，即可实现光速quit（真实）。</li>
</ul>
<p>不要小看提示，他可以很大程度上纠正拼写问题，有时使用指令/CFG的时候可以试着手动输一遍，过程中提示消失很可能是拼写有误；同样，如果使用hlae录制集锦，输入<code>mirv</code>发现没有提示极可能没有正确的使用hlae启动csgo。（不是hale！！）</p>
<h3 id="常用控制台指令">常用控制台指令</h3>
<h4 id="账号登录相关">账号登录相关</h4>
<ul>
<li>quit 快速退出游戏，使用心态爆炸，光速quit</li>
<li>exit 同上，不过没有那么有名</li>
<li>disconnect 退出服务器到主界面</li>
<li>retry 重连最近一次加入的房间，比如从休闲、死斗退出之后还想回到刚才的房间可以使用，前提是中途没有重开游戏；5e、b5等平台也可以使用快速重连服务器（小退），重启游戏是大退。</li>
</ul>
<h4 id="常用指令">常用指令</h4>
<ul>
<li>net_graph 1  显示网络参数：ping/var/choke等，0为关闭。</li>
<li>net_graphpos 1  网络参数的水平位置：1=右  2=中  3=左。</li>
<li>fps_max 300  设置最大帧数为300，一般会根据当前的帧数表现动态调整，尽可能让FPS波动不超过60以获得较好的观感体验。</li>
<li>volume 1  主音量大小，0为静音</li>
<li>sensitivity 0.9  鼠标灵敏度</li>
<li>map dust2  进入本地离线服务器并加载dust2地图，地图名不必完全一致，如荒漠迷城可以用<code>map mir</code>。</li>
<li>mat_monitorgamma 2.2  亮度，越小越亮[1.6~2.6]</li>
<li>mat_monitorgamma_tv_enabled &quot;0&quot;  显示模式[1.电视  0.电脑屏幕]</li>
<li>buy awp  购买武器指令，即购买awp</li>
<li>give weapon_ak47  获得ak47，常用于跑图</li>
<li>+right  视角右移，输入-right取消</li>
<li>+moveright  相当于按下D键，-moveright取消，和+right组成挂机防踢指令</li>
</ul>
<h4 id="cl_相关参数">cl_相关参数</h4>
<p>cl_开头的指令往往和HUD有关，比如雷达、血条、菜单等用于提示玩家的信息。</p>
<ul>
<li>cl_autowepswitch 0  关闭自动换上捡起的武器：珍爱生命，远离自动换枪</li>
<li>cl_autohelp 0  禁用游戏提示（格洛克/法玛斯连发提示）</li>
<li>cl_showhelp 0  禁用游戏提示</li>
<li>cl_dm_buyrandomweapons 0  关闭死斗随机买枪，功能同F3键</li>
<li>cl_draw_hud 0  关闭HUD，得到相对干净的画面，方便截图或者录制视频</li>
<li>cl_draw_only_deathnotices 0  关闭大部分HUD，保留准星和击杀信息，常用于录制视频和集锦</li>
<li>cl_drawhud_force_radar -1  强制关闭雷达，但是雷达下方的金钱数无法关闭，1开启雷达</li>
</ul>
<p>HUD颜色透明度、雷达参数省略，直接在设置中调整即可。</p>
<h4 id="准星参数">准星参数</h4>
<ul>
<li>cl_crosshairalpha 255  透明度（0~255）</li>
<li>cl_crosshairdot 1  准星中间的点，0关闭</li>
<li>cl_crosshairgap 1  十字准星间距，可以&lt;0</li>
<li>cl_crosshair_t 0  T型准星，1开启</li>
<li>cl_crosshairsize 3 准星长度</li>
<li>cl_crosshairthickness 1 准星厚度</li>
<li>cl_crosshairstyle 4  准星类型[1.  2.  3.  4.经典静态  5.跑动静止开枪动态]</li>
<li>cl_crosshair_drawoutline 0 准星黑色外轮廓粗细，0关闭</li>
<li>cl_crosshaircolor_b &quot;250&quot;</li>
<li>cl_crosshaircolor_r &quot;0&quot;</li>
<li>cl_crosshaircolor_g &quot;255&quot;  准星的颜色RGB值</li>
</ul>
<p>主要是这些参数，小改动使用控制台方便，更全面的调整请在创意工坊<strong>Crashz crosshair generator</strong>中调整。</p>
<h4 id="持枪视角参数">持枪视角参数</h4>
<ul>
<li>viewmodel_presetpos 2  持枪视角预设[1.默认  2.写实  3.经典]</li>
<li>viewmodel_recoil 0  取消开枪枪口向上跳动，1开启时跳动幅度很大</li>
<li>viewmodel_offset_x &quot;1.1&quot;</li>
<li>viewmodel_offset_y &quot;-1.8&quot;</li>
<li>viewmodel_offset_z &quot;0.2&quot;  XYZ轴的参数</li>
<li>viewmodel_fov &quot;54&quot;  视角的FOV（视野大小）</li>
<li>cl_bobcycle &quot;0.98&quot;  手臂摆动幅度</li>
</ul>
<p>主要浏览一下这些参数，可以在创意工坊<strong>Crashz viewmodel generator</strong>中调整。</p>
<h4 id="sv_相关参数">sv_相关参数</h4>
<p>sv是server的简写，一般在主机创建房间的时候使用，跑图常用。</p>
<ul>
<li>sv_cheats 1  开启作弊模式，有的指令官匹会影响平衡，跑图时记得开启</li>
<li>sv_infinite_ammo 1  无限子弹 [1.无限子弹  2.无限弹夹数  0.关闭]</li>
<li>sv_showimpacts  1  显示弹着点，0关闭</li>
<li>sv_showimpacts_time 15  弹着点时间，单位秒</li>
<li>sv_grenade_trajectory 1  显示投掷物轨迹，0关闭</li>
<li>sv_grenade_trajectory_time 15  投掷物轨迹显示时间</li>
<li>sv_grenade_trajectory_thickness 0.5  轨迹线厚度</li>
</ul>
<h4 id="bot相关指令">bot相关指令</h4>
<ul>
<li>bot_kick  踢掉BOT</li>
<li>bot_stop 1  BOT静止</li>
<li>bot_crouch 1  BOT蹲下</li>
<li>bot_add  添加BOT</li>
<li>bot_kill  杀死BOT</li>
<li>bot_place  放置BOT</li>
</ul>
<h4 id="mp_相关指令">mp_相关指令</h4>
<ul>
<li>mp_warmup_end  热身结束</li>
<li>mp_restartgame 1  重新开始游戏</li>
<li>mp_freezetime 1  回合开始静止1s</li>
<li>mp_round_restart_delay 2  回合结束后等待时间2s</li>
<li>god  无敌，gods是所有人无敌</li>
</ul>
<p>篇幅限制只挑了较为常用的指令，更多指令可以<a href="https://tools.dathost.net/csgo-commands">登录这个网站</a>，或<a href="https://developer.valvesoftware.com/wiki/Console_Command_List">V社官方指令清单</a>搜索查找。</p>
<hr>
<p>下面的文章会讲述进阶指令、启动项和Config|CFG相关内容。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown基本语法教程和编辑器选择]]></title>
        <id>https://eeudn8.coding-pages.com/markdown/</id>
        <link href="https://eeudn8.coding-pages.com/markdown/">
        </link>
        <updated>2019-05-12T03:13:32.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>初学Markdown，简单总结一下语法和编辑器的选择。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>初学Markdown，简单总结一下语法和编辑器的选择。</p>
</blockquote>
<!--more-->
<h2 id="markdown是什么">Markdown是什么？</h2>
<p><a href="http://www.markdown.cn/">Markdown</a> 是一种是一种<strong>轻量级</strong>的标记语言，它以纯文本形式编写文档，并最终以HTML格式发布。它易读、易写、易更改，兼容HTML，跨平台，常在Blog中使用，现在很多电子邮件中也使用了Markdown。</p>
<h2 id="markdown编辑器如何选">Markdown编辑器如何选？</h2>
<p>这取决于用什么系统，用何种方式编辑，比较推荐能够分屏实时预览的编辑器，“所见即所得”没有代码感，一般会不习惯：</p>
<p><strong>多平台</strong></p>
<ul>
<li>
<p><a href="https://typora.io/">Typora</a> 简洁强大，不支持分屏实时预览，但可以通过<code>Ctrl+/</code>切换视图，并且在预览模式下<strong>有很多小惊喜</strong>。不论是快捷键还是交互体验都做的非常好，<strong>强力推荐</strong>。不过有个小缺点：在源代码视图中没法打开文件视图窗口。</p>
</li>
<li>
<p><a href="https://atom.io/">Atom </a> 较为美观方便 <s>（除了图标）</s> ，按下Ctrl+Shift+M可以<strong>分屏实时预览</strong>显示效果。Atom可以用于各种代码，交互尚可，可以扩展中文菜单等（竟然可以找到V社起源游戏<code>.cfg</code>文件的高亮扩展包）。<br>
 <br>
<strong>Windows</strong></p>
</li>
<li>
<p><a href="http://markdownpad.com/">Markdownpad</a> 笔者同学正在使用的编辑器，支持<strong>分屏实时预览</strong>，交互尚可。<br>
 <br>
<strong>Mac</strong></p>
</li>
<li>
<p><a href="http://25.io/mou/">Mou</a> 界面简洁美观，支持<strong>分屏实时预览</strong>。其他的编辑器也不少。<br>
 <br>
<strong>Linux</strong></p>
</li>
<li>
<p><a href="https://remarkableapp.github.io">Remarkable</a> 它是一个卓越且功能齐全的 Markdown 编辑器，为用户提供了一些令人激动的特性<br>
 <br>
<strong>在线编辑</strong></p>
</li>
<li>
<p><a href="https://dillinger.io/">dillinger</a> 漂亮强大，分屏实时预览，支持md, html, pdf 文件导出。支持dropbox, onedrive, github. 来自国外，可能不够稳定。</p>
</li>
</ul>
<h2 id="markdown基本语法教程">Markdown基本语法教程</h2>
<h3 id="一-标题">一、标题</h3>
<ol>
<li>使用1~6个<code>#</code>，空格分隔。√</li>
</ol>
<pre><code># 这是一级标题
## 这是二级标题
### 这是三级标题
#### 这是四级标题
##### 这是五级标题
###### 这是六级标题
</code></pre>
<ol start="2">
<li>使用2个以上连续<code>=</code>或<code>-</code></li>
</ol>
<pre><code>一级标题
===
二级标题
--
</code></pre>
<h3 id="二-段落">二、段落</h3>
<ul>
<li>使用1个以上<code>&gt;</code>，可嵌套</li>
</ul>
<pre><code>&gt; 区块引用
&gt;&gt; 嵌套引用
&gt;&gt;&gt; 三嵌套引用
&gt;&gt;&gt;&gt; 四嵌套引用
</code></pre>
<h3 id="三-分割线">三、分割线</h3>
<ul>
<li>3个以上 <code>*</code>、<code>-</code>、<code>_</code> ，可以不连续，建议使用不连续减号<code>-- -</code> ，<strong>避免被识别成标题</strong>。</li>
</ul>
<pre><code>---
- - -
***
* * *
___
_ _ _
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<hr>
<h3 id="四-斜体-粗体和删除线">四、斜体、粗体和删除线</h3>
<ol>
<li>斜体：使用一对<code>*</code>括起来</li>
</ol>
<pre><code>*斜体*
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><em>斜体</em></p>
</blockquote>
<ol start="2">
<li>粗体：使用一对<code>**</code>或<code>__</code>括起来</li>
</ol>
<pre><code>**粗体**  __粗体__
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><strong>粗体</strong>  <strong>粗体</strong></p>
</blockquote>
<ol start="3">
<li>删除线：使用一对<code>~~</code>括起来，注意用空格分隔，否则编辑器中后面的内容无法高亮。</li>
</ol>
<pre><code>~~WDNMD~~
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><s>WDNMD</s></p>
</blockquote>
<h3 id="五-列表">五、列表</h3>
<ol>
<li>无序列表：行首或段落首使用<code>+</code>或<code>-</code>，空格分隔。建议使用<code>-</code>。</li>
</ol>
<pre><code>+ 第一行
- 第二行
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<ul>
<li>第一行</li>
</ul>
<ul>
<li>第二行</li>
</ul>
</blockquote>
<ol start="2">
<li>有序列表：数字+<code>.</code> 空格分隔正文。</li>
</ol>
<pre><code>1. Line 1
2. Line 2
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<ol>
<li>Line 1</li>
<li>Line 2</li>
</ol>
</blockquote>
<h3 id="六-代码框">六、代码框</h3>
<ol>
<li>小代码块：一对` ``</li>
</ol>
<pre><code>`Code`
</code></pre>
<ol start="2">
<li>单行代码框: 4个以上<code>空格</code>或2次以上<code>Tab</code></li>
</ol>
<pre><code>        Code
</code></pre>
<ol start="3">
<li>多行代码框：在2)基础上衍生，或使用一对3~个以上<code>``。使用</code>空格`生成的框可能为矩形（非圆角矩形）</li>
</ol>
<pre><code>
```

Code Line 1
Code Line 2

```

</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<pre><code>Code Line 1
Code Line 2
</code></pre>
<h3 id="七-链接">七、链接</h3>
<ul>
<li>参考代码：</li>
</ul>
<pre><code>[GitHub](http://github.com)
自动生成连接 &lt;http://www.github.com/&gt;
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><a href="http://github.com">GitHub</a></p>
</blockquote>
<blockquote>
<p>自动生成连接 <a href="http://www.github.com/">http://www.github.com/</a></p>
</blockquote>
<h3 id="八-图片">八、图片</h3>
<ul>
<li>参考链接代码，之前加上<code>!</code>。Blog分享图片需要使用一些工具比如图床，Github也可以但是加载较慢，这里分享一个免费的图床 <a href="https://www.hualigs.cn/">链接</a> :</li>
</ul>
<pre><code>![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)
</code></pre>
<ul>
<li>
<p>显示效果：</p>
<figure data-type="image" tabindex="1"><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up" loading="lazy"></figure>
</li>
</ul>
<h3 id="九-表格">九、表格</h3>
<ul>
<li>若干<code>-</code>表示分割线，左侧<code>:</code>表示左对齐，右侧表示右对齐，两侧均有表示居中。行与列用<code>|</code>分隔。参考代码：</li>
</ul>
<pre><code>| Header One     | Header Two     |
| :------------- | :------------- |
| Item One       | Item Two       |
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Header One</th>
<th style="text-align:left">Header Two</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="心得">心得</h2>
<ul>
<li>
<p>很多编译器会设置快键键或者关联词，比如在Atom中输入<code>c</code>会弹出<code>code</code>，此时按下<code>Tab</code>或者<code>Enter</code>即可快速得到相应符号。</p>
</li>
<li>
<p>可以收集整理一遍Markdown的语法，过程中就可以熟悉并较为熟练掌握这些语法、符号等。</p>
</li>
<li>
<p>很多格式之间需要多空一行否则会被前者的格式覆盖。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo+yilia主题博客搭建配置(二)：设置Github和SSH与部署Hexo]]></title>
        <id>https://eeudn8.coding-pages.com/hexo-01/</id>
        <link href="https://eeudn8.coding-pages.com/hexo-01/">
        </link>
        <updated>2019-05-12T03:05:44.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>上篇讲述了Hexo的配置方法和一些常用指令，这篇继续说明如何把Hexo部署到网络上，设置Github和SSH秘钥。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>上篇讲述了Hexo的配置方法和一些常用指令，这篇继续说明如何把Hexo部署到网络上，设置Github和SSH秘钥。</p>
</blockquote>
<!--more-->
<h2 id="设置github">设置Github</h2>
<p>目前使用<code>hexo cl</code>、<code>hexo g</code>、<code>hexo s</code>这三条已经可以在本地测试、查看基础的hexo博客了，下面要做的是把博客部署到远端，这里使用免费的Github，如果有需要也可以自行购买域名。</p>
<p>打开<a href="https://github.com/">Github</a>，没有账户的赶紧注册一个吧。</p>
<p>接下来新建一个项目，即点击<code>Start a project</code>，或在某处点击<code>New repository</code>创建仓库。</p>
<p>起名时一定要注意，否则后期会出问题，格式为<code>用户名.github.io</code>，以<code>Purple</code>为例，则填入</p>
<pre><code>Purple.github.io
</code></pre>
<h2 id="设置ssh秘钥">设置SSH秘钥</h2>
<p>回到Git bash，下面生成SSH。最好可以先cd到blog目录，以防找不到。</p>
<pre><code>git config --global user.name &quot;yourname&quot;
git config --global user.email &quot;youremail&quot;
</code></pre>
<p>&quot;yourname&quot;处替换为用户名，&quot;youremail&quot;处替换为注册Github时所用邮箱。</p>
<p>记得用下面的指令检查：</p>
<pre><code>git config user.name
git config user.email
</code></pre>
<p>确定无误之后输入创建SSH的指令，邮箱地址同理：</p>
<pre><code>ssh-keygen -t rsa -C &quot;youremail&quot;
</code></pre>
<p>无脑回车，最后会告知已经生成了.ssh文件夹。</p>
<blockquote>
<p>ssh是一个密匙，<code>id_rsa</code>是这台电脑的私人秘钥，注意保密；<code>id_rsa.pub</code>是公共秘钥，需要和Github中的设置匹配，这样就可以通过git上传部署到github上，设置好SSH之后只需用<code>hexo d</code>即可提交。</p>
</blockquote>
<p>打开<code>id_rsa.pub</code>，复制其中的信息。</p>
<p>在Github中找到<a href="https://github.com/settings/profile">Settings</a>，找到<a href="https://github.com/settings/keys"><code>SSH and GPG keys</code></a>一项并点击<code>New SSH key</code>，粘贴刚才复制的秘钥信息。</p>
<p>记得回到Git bash中检查，输入：</p>
<pre><code>ssh -T git@github.com	//然后输入yes
</code></pre>
<h2 id="部署hexo到github">部署Hexo到Github</h2>
<p>至此Hexo已经和Github关联，接下来要做的是简单设置一下Hexo并提交(Git)。</p>
<p>在此之前务必了解一下整个博客目录的<strong>结构</strong>：</p>
<ul>
<li>node_modules：依赖包</li>
<li>public：存放生成的页面，文件由指令<code>hexo g</code>生成</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：存放源文件，包括你的文章</li>
<li>themes：主题，默认landscape主题</li>
<li><strong>_config.yml</strong>：博客的配置文件</li>
<li><strong>themes/landscape/_config.yml</strong>：默认landscape主题的配置文件，用来存放页面的各种设置，其他主题同理</li>
</ul>
<p>一定要注意这里的两个<code>_config.yml</code>是<strong>不同的</strong>，在博客的配置文件中设置标题、描述、关键词、URL、分类&amp;标签、部署、<strong>主题</strong>等，而在主题的配置文件中设置页面的结构、样式、功能。</p>
<p>修改主题的内容在下一篇说，而部署要用到根目录下的**_config.yml**。打开它，找到deploy，修改repo：</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/yourname/yourname.github.io.git
  branch: master
</code></pre>
<p>同上，yourname替换为Github的用户名。</p>
<p>想要通过<code>hexo deploy</code>来提交(git)得用到一个插件，cd到博客目录，命令行输入：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>安装成功之后就可以使用上篇提到的指令了：</p>
<pre><code>hexo cl		//清理public文件夹
hexo d -g	//先生成再部署
</code></pre>
<blockquote>
<p>第一次部署过程中会弹出一个界面，要输入账号密码。</p>
</blockquote>
<p>提示成功之后就可以在浏览器中查看博客啦~ 以<code>Purple-CSGO</code>为例，blog的地址即<code>https://purple-csgo.github.io/</code></p>
<blockquote>
<p>下篇说明更换yilia主题和编写提交博文的方法~</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo+yilia主题博客搭建配置(一)：简单配置Hexo和常用指令介绍]]></title>
        <id>https://eeudn8.coding-pages.com/hexo-02/</id>
        <link href="https://eeudn8.coding-pages.com/hexo-02/">
        </link>
        <updated>2019-05-12T02:53:44.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>花了将近一天半的时间使用同学推荐的Hexo框架搭建了Blog，使用的是yilia主题，下面我会分篇讲述一些细节和我踩过的坑。搭建过程部分参考了b站<a href="https://www.bilibili.com/video/av44544186">Codesheep的视频</a>。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>花了将近一天半的时间使用同学推荐的Hexo框架搭建了Blog，使用的是yilia主题，下面我会分篇讲述一些细节和我踩过的坑。搭建过程部分参考了b站<a href="https://www.bilibili.com/video/av44544186">Codesheep的视频</a>。</p>
</blockquote>
<!-- more -->
<h2 id="hexo简介">Hexo简介</h2>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上。有不少人使用Hexo框架，其主题和解决问题的方案也更多，在遇坑时可以参照前人的解决方法。</p>
<p>笔者使用了<em>Codesheep</em>推荐的yilia主题，简洁美观，适配各种尺寸比例的终端并且集成了很多组件。在yilia的基础上使用了Gitalk评论系统，添加了归档，修改代码高亮出的背景色等等。<strong>所有的操作均在Windows环境下进行</strong>。</p>
<h2 id="安装hexo及所需组件">安装Hexo及所需组件</h2>
<ul>
<li>
<p>下载安装<a href="https://gitforwindows.org/">Git</a>。安装后得到Git Bash的命令行工具。可以在命令行中输入<code>git --version</code>来查看版本，检验是否成功安装。</p>
</li>
<li>
<p>下载安装<a href="https://nodejs.org/en/download/">nodejs</a>。下载LTS版本即可。可在命令行中输入</p>
</li>
</ul>
<pre><code>node -v
npm -v
</code></pre>
<p>来查看版本，检验是否成功安装。</p>
<ul>
<li>安装Hexo组件。在Git Bash中输入：</li>
</ul>
<pre><code>npm install -g hexo-cli
</code></pre>
<p>记得使用<code>hexo -v</code>检验是否成功安装。</p>
<ul>
<li>确定博客安装位置，比如<code>E:/myblog</code>，则在Git Bash中输入：</li>
</ul>
<pre><code>cd e:/myblog
</code></pre>
<p>切换到选定的位置。然后初始化Hexo，输入：</p>
<pre><code>npm install
</code></pre>
<h2 id="熟悉hexo及本地查看博客">熟悉Hexo及本地查看博客</h2>
<p>至此Hexo已经在<code>E:/myblog</code>位置下安装完成，在部署到网络之前先<strong>熟悉一下Hexo的常用指令，在本地服务器查看Hexo页面</strong>。</p>
<ul>
<li>处理源文件，<strong>生成</strong>（generate）的文件放在如<code>E:/myblog/public</code>，该位置下的文件最终显示在网页中。</li>
</ul>
<pre><code>hexo generate //简写： hexo g
</code></pre>
<ul>
<li><strong>打开本地服务器，快速测试hexo</strong>。开启后在浏览器中输入<code>localhost:4000</code>查看网页。在命令行中按下<code>Ctrl+C</code>关闭本地服务器。</li>
</ul>
<pre><code>hexo server //简写：hexo s
</code></pre>
<ul>
<li><strong>清理</strong><code>public</code>目录下的文件。有的修改只通过<code>hexo g</code>无法完全修改这些文件，会出现bug。清理之后再<code>hexo g</code>和<code>hexo d</code>即可。</li>
</ul>
<pre><code>hexo clean //简写：hexo cl
</code></pre>
<ul>
<li><strong>部署</strong>。把文件deploy到服务器上。暂时还不用输入这条指令，等到下篇文章会具体说明。</li>
</ul>
<pre><code>hexo deploy //简写：hexo d
</code></pre>
<hr>
<p>今后会经常输入这些指令，可以使用简写和组合。如：</p>
<pre><code>hexo cl &amp; hexo g &amp; hexo s
</code></pre>
<p>可以快速清理、生成并开启本地服务器，不过偶尔顺序会变成先<code>generate</code>再<code>clean</code>，需要注意一下。</p>
<p>一般重复部署到远端服务器时可以这样：</p>
<pre><code>hexo d -g
</code></pre>
<p>可以先生成再部署，后期需要<code>clean</code>的情况比较少，基本不会出问题。</p>
<p>使用命令行时可以按↑快速切换到历史指令</p>
<p>每次打开Git Bash都要cd到blog安装位置很麻烦，找到其快捷方式，<code>右键-属性-起始位置</code>改成blog的路径，每次打开就可以直接操作啦~</p>
]]></content>
    </entry>
</feed>