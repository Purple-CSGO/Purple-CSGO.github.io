<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://eeudn8.coding-pages.com/</id>
    <title>Purp1e</title>
    <updated>2020-02-09T07:39:45.659Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://eeudn8.coding-pages.com/"/>
    <link rel="self" href="https://eeudn8.coding-pages.com/atom.xml"/>
    <subtitle>cuz&apos; o&apos; love</subtitle>
    <logo>https://eeudn8.coding-pages.com/images/avatar.png</logo>
    <icon>https://eeudn8.coding-pages.com/favicon.ico</icon>
    <rights>All rights reserved 2020, Purp1e</rights>
    <entry>
        <title type="html"><![CDATA[Markdown基本语法教程和编辑器选择]]></title>
        <id>https://eeudn8.coding-pages.com/markdown-ji-ben-yu-fa-jiao-cheng-he-bian-ji-qi-xuan-ze/</id>
        <link href="https://eeudn8.coding-pages.com/markdown-ji-ben-yu-fa-jiao-cheng-he-bian-ji-qi-xuan-ze/">
        </link>
        <updated>2019-05-12T03:13:32.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>初学Markdown，简单总结一下语法和编辑器的选择。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>初学Markdown，简单总结一下语法和编辑器的选择。</p>
</blockquote>
<!--more-->
<h2 id="markdown是什么">Markdown是什么？</h2>
<p><a href="http://www.markdown.cn/">Markdown</a> 是一种是一种<strong>轻量级</strong>的标记语言，它以纯文本形式编写文档，并最终以HTML格式发布。它易读、易写、易更改，兼容HTML，跨平台，常在Blog中使用，现在很多电子邮件中也使用了Markdown。</p>
<h2 id="markdown编辑器如何选">Markdown编辑器如何选？</h2>
<p>这取决于用什么系统，用何种方式编辑，比较推荐能够分屏实时预览的编辑器，“所见即所得”没有代码感，一般会不习惯：</p>
<p><strong>多平台</strong></p>
<ul>
<li>
<p><a href="https://typora.io/">Typora</a> 简洁强大，不支持分屏实时预览，但可以通过<code>Ctrl+/</code>切换视图，并且在预览模式下<strong>有很多小惊喜</strong>。不论是快捷键还是交互体验都做的非常好，<strong>强力推荐</strong>。不过有个小缺点：在源代码视图中没法打开文件视图窗口。</p>
</li>
<li>
<p><a href="https://atom.io/">Atom </a> 较为美观方便 <s>（除了图标）</s> ，按下Ctrl+Shift+M可以<strong>分屏实时预览</strong>显示效果。Atom可以用于各种代码，交互尚可，可以扩展中文菜单等（竟然可以找到V社起源游戏<code>.cfg</code>文件的高亮扩展包）。<br>
 <br>
<strong>Windows</strong></p>
</li>
<li>
<p><a href="http://markdownpad.com/">Markdownpad</a> 笔者同学正在使用的编辑器，支持<strong>分屏实时预览</strong>，交互尚可。<br>
 <br>
<strong>Mac</strong></p>
</li>
<li>
<p><a href="http://25.io/mou/">Mou</a> 界面简洁美观，支持<strong>分屏实时预览</strong>。其他的编辑器也不少。<br>
 <br>
<strong>Linux</strong></p>
</li>
<li>
<p><a href="https://remarkableapp.github.io">Remarkable</a> 它是一个卓越且功能齐全的 Markdown 编辑器，为用户提供了一些令人激动的特性<br>
 <br>
<strong>在线编辑</strong></p>
</li>
<li>
<p><a href="https://dillinger.io/">dillinger</a> 漂亮强大，分屏实时预览，支持md, html, pdf 文件导出。支持dropbox, onedrive, github. 来自国外，可能不够稳定。</p>
</li>
</ul>
<h2 id="markdown基本语法教程">Markdown基本语法教程</h2>
<h3 id="一-标题">一、标题</h3>
<ol>
<li>使用1~6个<code>#</code>，空格分隔。√</li>
</ol>
<pre><code># 这是一级标题
## 这是二级标题
### 这是三级标题
#### 这是四级标题
##### 这是五级标题
###### 这是六级标题
</code></pre>
<ol start="2">
<li>使用2个以上连续<code>=</code>或<code>-</code></li>
</ol>
<pre><code>一级标题
===
二级标题
--
</code></pre>
<h3 id="二-段落">二、段落</h3>
<ul>
<li>使用1个以上<code>&gt;</code>，可嵌套</li>
</ul>
<pre><code>&gt; 区块引用
&gt;&gt; 嵌套引用
&gt;&gt;&gt; 三嵌套引用
&gt;&gt;&gt;&gt; 四嵌套引用
</code></pre>
<h3 id="三-分割线">三、分割线</h3>
<ul>
<li>3个以上 <code>*</code>、<code>-</code>、<code>_</code> ，可以不连续，建议使用不连续减号<code>-- -</code> ，<strong>避免被识别成标题</strong>。</li>
</ul>
<pre><code>---
- - -
***
* * *
___
_ _ _
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<hr>
<h3 id="四-斜体-粗体和删除线">四、斜体、粗体和删除线</h3>
<ol>
<li>斜体：使用一对<code>*</code>括起来</li>
</ol>
<pre><code>*斜体*
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><em>斜体</em></p>
</blockquote>
<ol start="2">
<li>粗体：使用一对<code>**</code>或<code>__</code>括起来</li>
</ol>
<pre><code>**粗体**  __粗体__
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><strong>粗体</strong>  <strong>粗体</strong></p>
</blockquote>
<ol start="3">
<li>删除线：使用一对<code>~~</code>括起来，注意用空格分隔，否则编辑器中后面的内容无法高亮。</li>
</ol>
<pre><code>~~WDNMD~~
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><s>WDNMD</s></p>
</blockquote>
<h3 id="五-列表">五、列表</h3>
<ol>
<li>无序列表：行首或段落首使用<code>+</code>或<code>-</code>，空格分隔。建议使用<code>-</code>。</li>
</ol>
<pre><code>+ 第一行
- 第二行
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<ul>
<li>第一行</li>
</ul>
<ul>
<li>第二行</li>
</ul>
</blockquote>
<ol start="2">
<li>有序列表：数字+<code>.</code> 空格分隔正文。</li>
</ol>
<pre><code>1. Line 1
2. Line 2
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<ol>
<li>Line 1</li>
<li>Line 2</li>
</ol>
</blockquote>
<h3 id="六-代码框">六、代码框</h3>
<ol>
<li>小代码块：一对` ``</li>
</ol>
<pre><code>`Code`
</code></pre>
<ol start="2">
<li>单行代码框: 4个以上<code>空格</code>或2次以上<code>Tab</code></li>
</ol>
<pre><code>        Code
</code></pre>
<ol start="3">
<li>多行代码框：在2)基础上衍生，或使用一对3~个以上<code>``。使用</code>空格`生成的框可能为矩形（非圆角矩形）</li>
</ol>
<pre><code>
```

Code Line 1
Code Line 2

```

</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<pre><code>Code Line 1
Code Line 2
</code></pre>
<h3 id="七-链接">七、链接</h3>
<ul>
<li>参考代码：</li>
</ul>
<pre><code>[GitHub](http://github.com)
自动生成连接 &lt;http://www.github.com/&gt;
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<blockquote>
<p><a href="http://github.com">GitHub</a></p>
</blockquote>
<blockquote>
<p>自动生成连接 <a href="http://www.github.com/">http://www.github.com/</a></p>
</blockquote>
<h3 id="八-图片">八、图片</h3>
<ul>
<li>参考链接代码，之前加上<code>!</code>。Blog分享图片需要使用一些工具比如图床，Github也可以但是加载较慢，这里分享一个免费的图床 <a href="https://www.hualigs.cn/">链接</a> :</li>
</ul>
<pre><code>![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)
</code></pre>
<ul>
<li>
<p>显示效果：</p>
<figure data-type="image" tabindex="1"><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up" loading="lazy"></figure>
</li>
</ul>
<h3 id="九-表格">九、表格</h3>
<ul>
<li>若干<code>-</code>表示分割线，左侧<code>:</code>表示左对齐，右侧表示右对齐，两侧均有表示居中。行与列用<code>|</code>分隔。参考代码：</li>
</ul>
<pre><code>| Header One     | Header Two     |
| :------------- | :------------- |
| Item One       | Item Two       |
</code></pre>
<ul>
<li>显示效果：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Header One</th>
<th style="text-align:left">Header Two</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="心得">心得</h2>
<ul>
<li>
<p>很多编译器会设置快键键或者关联词，比如在Atom中输入<code>c</code>会弹出<code>code</code>，此时按下<code>Tab</code>或者<code>Enter</code>即可快速得到相应符号。</p>
</li>
<li>
<p>可以收集整理一遍Markdown的语法，过程中就可以熟悉并较为熟练掌握这些语法、符号等。</p>
</li>
<li>
<p>很多格式之间需要多空一行否则会被前者的格式覆盖。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo+yilia主题博客搭建配置(二)：设置Github和SSH与部署Hexo]]></title>
        <id>https://eeudn8.coding-pages.com/hexoyilia-zhu-ti-bo-ke-da-jian-pei-zhi-er-she-zhi-github-he-ssh-yu-bu-shu-hexo/</id>
        <link href="https://eeudn8.coding-pages.com/hexoyilia-zhu-ti-bo-ke-da-jian-pei-zhi-er-she-zhi-github-he-ssh-yu-bu-shu-hexo/">
        </link>
        <updated>2019-05-12T03:05:44.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>上篇讲述了Hexo的配置方法和一些常用指令，这篇继续说明如何把Hexo部署到网络上，设置Github和SSH秘钥。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>上篇讲述了Hexo的配置方法和一些常用指令，这篇继续说明如何把Hexo部署到网络上，设置Github和SSH秘钥。</p>
</blockquote>
<!--more-->
<h2 id="设置github">设置Github</h2>
<p>目前使用<code>hexo cl</code>、<code>hexo g</code>、<code>hexo s</code>这三条已经可以在本地测试、查看基础的hexo博客了，下面要做的是把博客部署到远端，这里使用免费的Github，如果有需要也可以自行购买域名。</p>
<p>打开<a href="https://github.com/">Github</a>，没有账户的赶紧注册一个吧。</p>
<p>接下来新建一个项目，即点击<code>Start a project</code>，或在某处点击<code>New repository</code>创建仓库。</p>
<p>起名时一定要注意，否则后期会出问题，格式为<code>用户名.github.io</code>，以<code>Purple</code>为例，则填入</p>
<pre><code>Purple.github.io
</code></pre>
<h2 id="设置ssh秘钥">设置SSH秘钥</h2>
<p>回到Git bash，下面生成SSH。最好可以先cd到blog目录，以防找不到。</p>
<pre><code>git config --global user.name &quot;yourname&quot;
git config --global user.email &quot;youremail&quot;
</code></pre>
<p>&quot;yourname&quot;处替换为用户名，&quot;youremail&quot;处替换为注册Github时所用邮箱。</p>
<p>记得用下面的指令检查：</p>
<pre><code>git config user.name
git config user.email
</code></pre>
<p>确定无误之后输入创建SSH的指令，邮箱地址同理：</p>
<pre><code>ssh-keygen -t rsa -C &quot;youremail&quot;
</code></pre>
<p>无脑回车，最后会告知已经生成了.ssh文件夹。</p>
<blockquote>
<p>ssh是一个密匙，<code>id_rsa</code>是这台电脑的私人秘钥，注意保密；<code>id_rsa.pub</code>是公共秘钥，需要和Github中的设置匹配，这样就可以通过git上传部署到github上，设置好SSH之后只需用<code>hexo d</code>即可提交。</p>
</blockquote>
<p>打开<code>id_rsa.pub</code>，复制其中的信息。</p>
<p>在Github中找到<a href="https://github.com/settings/profile">Settings</a>，找到<a href="https://github.com/settings/keys"><code>SSH and GPG keys</code></a>一项并点击<code>New SSH key</code>，粘贴刚才复制的秘钥信息。</p>
<p>记得回到Git bash中检查，输入：</p>
<pre><code>ssh -T git@github.com	//然后输入yes
</code></pre>
<h2 id="部署hexo到github">部署Hexo到Github</h2>
<p>至此Hexo已经和Github关联，接下来要做的是简单设置一下Hexo并提交(Git)。</p>
<p>在此之前务必了解一下整个博客目录的<strong>结构</strong>：</p>
<ul>
<li>node_modules：依赖包</li>
<li>public：存放生成的页面，文件由指令<code>hexo g</code>生成</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：存放源文件，包括你的文章</li>
<li>themes：主题，默认landscape主题</li>
<li><strong>_config.yml</strong>：博客的配置文件</li>
<li><strong>themes/landscape/_config.yml</strong>：默认landscape主题的配置文件，用来存放页面的各种设置，其他主题同理</li>
</ul>
<p>一定要注意这里的两个<code>_config.yml</code>是<strong>不同的</strong>，在博客的配置文件中设置标题、描述、关键词、URL、分类&amp;标签、部署、<strong>主题</strong>等，而在主题的配置文件中设置页面的结构、样式、功能。</p>
<p>修改主题的内容在下一篇说，而部署要用到根目录下的**_config.yml**。打开它，找到deploy，修改repo：</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/yourname/yourname.github.io.git
  branch: master
</code></pre>
<p>同上，yourname替换为Github的用户名。</p>
<p>想要通过<code>hexo deploy</code>来提交(git)得用到一个插件，cd到博客目录，命令行输入：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>安装成功之后就可以使用上篇提到的指令了：</p>
<pre><code>hexo cl		//清理public文件夹
hexo d -g	//先生成再部署
</code></pre>
<blockquote>
<p>第一次部署过程中会弹出一个界面，要输入账号密码。</p>
</blockquote>
<p>提示成功之后就可以在浏览器中查看博客啦~ 以<code>Purple-CSGO</code>为例，blog的地址即<code>https://purple-csgo.github.io/</code></p>
<blockquote>
<p>下篇说明更换yilia主题和编写提交博文的方法~</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo+yilia主题博客搭建配置(一)：简单配置Hexo和常用指令介绍]]></title>
        <id>https://eeudn8.coding-pages.com/hexoyilia-zhu-ti-bo-ke-da-jian-pei-zhi-yi-jian-dan-pei-zhi-hexo-he-chang-yong-zhi-ling-jie-shao/</id>
        <link href="https://eeudn8.coding-pages.com/hexoyilia-zhu-ti-bo-ke-da-jian-pei-zhi-yi-jian-dan-pei-zhi-hexo-he-chang-yong-zhi-ling-jie-shao/">
        </link>
        <updated>2019-05-12T02:53:44.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>花了将近一天半的时间使用同学推荐的Hexo框架搭建了Blog，使用的是yilia主题，下面我会分篇讲述一些细节和我踩过的坑。搭建过程部分参考了b站<a href="https://www.bilibili.com/video/av44544186">Codesheep的视频</a>。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>花了将近一天半的时间使用同学推荐的Hexo框架搭建了Blog，使用的是yilia主题，下面我会分篇讲述一些细节和我踩过的坑。搭建过程部分参考了b站<a href="https://www.bilibili.com/video/av44544186">Codesheep的视频</a>。</p>
</blockquote>
<!-- more -->
<h2 id="hexo简介">Hexo简介</h2>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上。有不少人使用Hexo框架，其主题和解决问题的方案也更多，在遇坑时可以参照前人的解决方法。</p>
<p>笔者使用了<em>Codesheep</em>推荐的yilia主题，简洁美观，适配各种尺寸比例的终端并且集成了很多组件。在yilia的基础上使用了Gitalk评论系统，添加了归档，修改代码高亮出的背景色等等。<strong>所有的操作均在Windows环境下进行</strong>。</p>
<h2 id="安装hexo及所需组件">安装Hexo及所需组件</h2>
<ul>
<li>
<p>下载安装<a href="https://gitforwindows.org/">Git</a>。安装后得到Git Bash的命令行工具。可以在命令行中输入<code>git --version</code>来查看版本，检验是否成功安装。</p>
</li>
<li>
<p>下载安装<a href="https://nodejs.org/en/download/">nodejs</a>。下载LTS版本即可。可在命令行中输入</p>
</li>
</ul>
<pre><code>node -v
npm -v
</code></pre>
<p>来查看版本，检验是否成功安装。</p>
<ul>
<li>安装Hexo组件。在Git Bash中输入：</li>
</ul>
<pre><code>npm install -g hexo-cli
</code></pre>
<p>记得使用<code>hexo -v</code>检验是否成功安装。</p>
<ul>
<li>确定博客安装位置，比如<code>E:/myblog</code>，则在Git Bash中输入：</li>
</ul>
<pre><code>cd e:/myblog
</code></pre>
<p>切换到选定的位置。然后初始化Hexo，输入：</p>
<pre><code>npm install
</code></pre>
<h2 id="熟悉hexo及本地查看博客">熟悉Hexo及本地查看博客</h2>
<p>至此Hexo已经在<code>E:/myblog</code>位置下安装完成，在部署到网络之前先<strong>熟悉一下Hexo的常用指令，在本地服务器查看Hexo页面</strong>。</p>
<ul>
<li>处理源文件，<strong>生成</strong>（generate）的文件放在如<code>E:/myblog/public</code>，该位置下的文件最终显示在网页中。</li>
</ul>
<pre><code>hexo generate //简写： hexo g
</code></pre>
<ul>
<li><strong>打开本地服务器，快速测试hexo</strong>。开启后在浏览器中输入<code>localhost:4000</code>查看网页。在命令行中按下<code>Ctrl+C</code>关闭本地服务器。</li>
</ul>
<pre><code>hexo server //简写：hexo s
</code></pre>
<ul>
<li><strong>清理</strong><code>public</code>目录下的文件。有的修改只通过<code>hexo g</code>无法完全修改这些文件，会出现bug。清理之后再<code>hexo g</code>和<code>hexo d</code>即可。</li>
</ul>
<pre><code>hexo clean //简写：hexo cl
</code></pre>
<ul>
<li><strong>部署</strong>。把文件deploy到服务器上。暂时还不用输入这条指令，等到下篇文章会具体说明。</li>
</ul>
<pre><code>hexo deploy //简写：hexo d
</code></pre>
<hr>
<p>今后会经常输入这些指令，可以使用简写和组合。如：</p>
<pre><code>hexo cl &amp; hexo g &amp; hexo s
</code></pre>
<p>可以快速清理、生成并开启本地服务器，不过偶尔顺序会变成先<code>generate</code>再<code>clean</code>，需要注意一下。</p>
<p>一般重复部署到远端服务器时可以这样：</p>
<pre><code>hexo d -g
</code></pre>
<p>可以先生成再部署，后期需要<code>clean</code>的情况比较少，基本不会出问题。</p>
<p>使用命令行时可以按↑快速切换到历史指令</p>
<p>每次打开Git Bash都要cd到blog安装位置很麻烦，找到其快捷方式，<code>右键-属性-起始位置</code>改成blog的路径，每次打开就可以直接操作啦~</p>
]]></content>
    </entry>
</feed>